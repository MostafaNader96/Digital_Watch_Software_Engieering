
DigitalWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  00001f30  00001fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001a0  008001a0  00002104  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009a4  00000000  00000000  00003d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000046bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  00004993  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  0000641b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  000072d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000080cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  0000822c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  000084eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <main>
      8a:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e9       	ldi	r26, 0x94	; 148
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__stack+0x27>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__stack+0x123>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__stack+0x31>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__stack+0x129>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__stack+0x41>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__stack+0x4d>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__stack+0x47>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__stack+0x123>
     4a6:	64 e9       	ldi	r22, 0x94	; 148
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__stack+0x129>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__stack+0x5f>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__stack+0x67>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__stack+0x6b>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__stack+0x129>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__stack+0xa5>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__stack+0xd3>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__stack+0xb9>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__stack+0x11b>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__stack+0x11b>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__stack+0x11b>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	e4 56       	subi	r30, 0x64	; 100
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__pack_f+0x178>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__pack_f+0x34>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__pack_f+0x172>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__pack_f+0x40>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__pack_f+0x4a>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__pack_f+0x50>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__pack_f+0x17c>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__pack_f+0x5e>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__pack_f+0x114>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__pack_f+0x76>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__pack_f+0xca>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__pack_f+0x86>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__pack_f+0x7e>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__pack_f+0x9c>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__pack_f+0x94>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__pack_f+0xbe>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__pack_f+0xee>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__pack_f+0xf6>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__pack_f+0xf6>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__pack_f+0x10e>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__pack_f+0x162>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__pack_f+0x172>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__pack_f+0x144>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__pack_f+0x154>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x14c>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__pack_f+0x162>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__pack_f+0x164>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__pack_f+0x17c>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <CLCD_voidInitialize>:



/*Description: This API Initializes the LCD*/
void CLCD_voidInitialize(void)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(40);
     b82:	68 e2       	ldi	r22, 0x28	; 40
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
	CLCD_voidSetEnablePulse();
	CLCD_voidSetHalfDataPort(0b1000);
	CLCD_voidSetEnablePulse();

#elif CLCD_u8_DATA_LENGTH==EIGHT_BITS_MODE
	CLCD_voidWriteCmd(0b00111000);
     b8e:	88 e3       	ldi	r24, 0x38	; 56
     b90:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
#else #error "WRONG DATA LENGTH CHOICE"

#endif

	CLCD_voidWriteCmd(0b00001100);
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
	CLCD_voidWriteCmd(0b00000001);
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
	Delay_ms(2);
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>

}
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <CLCD_voidWriteData>:

/*Description: This API Shall display the data sent on the LCD*/
void CLCD_voidWriteData(u8 Copy_u8Data)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	89 83       	std	Y+1, r24	; 0x01
	/* Set RS = 1 */
	SetPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN,1);
     bbe:	84 e4       	ldi	r24, 0x44	; 68
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	/* Set RW = 0 */
	SetPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN,0);
     bc8:	84 e4       	ldi	r24, 0x44	; 68
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	CLCD_voidSetEnablePulse();


#elif CLCD_u8_DATA_LENGTH==EIGHT_BITS_MODE
	/* Set Data on Data Port */
	CLCD_voidSetDataPort(Copy_u8Data);
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	0e 94 cb 06 	call	0xd96	; 0xd96 <CLCD_voidSetDataPort>
	/* Enable Pulse */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
     bd8:	84 e4       	ldi	r24, 0x44	; 68
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Delay_ms(1);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
     bee:	84 e4       	ldi	r24, 0x44	; 68
     bf0:	62 e0       	ldi	r22, 0x02	; 2
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	//_delay_ms(1);
#else #error "WRONG DATA LENGTH CHOICE"

#endif
}
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <CLCD_voidWriteCmd>:

/*Description: This API Sends a specific command to the LCD*/
void CLCD_voidWriteCmd(u8 Copy_u8Cmd)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	0f 92       	push	r0
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	89 83       	std	Y+1, r24	; 0x01
	/* Set RS = 0 */
	SetPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN,0);
     c0c:	84 e4       	ldi	r24, 0x44	; 68
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	/* Set RW = 0 */
	SetPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN,0);
     c16:	84 e4       	ldi	r24, 0x44	; 68
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	CLCD_voidSetEnablePulse();


#elif CLCD_u8_DATA_LENGTH==EIGHT_BITS_MODE
	/* Set Data on Data Port */
	CLCD_voidSetDataPort(Copy_u8Cmd);
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	0e 94 cb 06 	call	0xd96	; 0xd96 <CLCD_voidSetDataPort>
	/* Enable Pulse */
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
     c26:	84 e4       	ldi	r24, 0x44	; 68
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Delay_ms(1);
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
     c3c:	84 e4       	ldi	r24, 0x44	; 68
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
#else #error "WRONG DATA LENGTH CHOICE"

#endif


}
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <CLCD_voidWriteString>:

/*Description: This API Shall display the data string sent on the LCD*/
void CLCD_voidWriteString(const char* Copy_pchString)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <CLCD_voidWriteString+0x6>
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9b 83       	std	Y+3, r25	; 0x03
     c5c:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;Copy_pchString[i]>0;i++)
     c5e:	19 82       	std	Y+1, r1	; 0x01
     c60:	0e c0       	rjmp	.+28     	; 0xc7e <CLCD_voidWriteString+0x30>
	{
		CLCD_voidWriteData(Copy_pchString[i]);
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	fc 01       	movw	r30, r24
     c6e:	e2 0f       	add	r30, r18
     c70:	f3 1f       	adc	r31, r19
     c72:	80 81       	ld	r24, Z
     c74:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>

/*Description: This API Shall display the data string sent on the LCD*/
void CLCD_voidWriteString(const char* Copy_pchString)
{

	for(u8 i=0;Copy_pchString[i]>0;i++)
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	9b 81       	ldd	r25, Y+3	; 0x03
     c88:	fc 01       	movw	r30, r24
     c8a:	e2 0f       	add	r30, r18
     c8c:	f3 1f       	adc	r31, r19
     c8e:	80 81       	ld	r24, Z
     c90:	88 23       	and	r24, r24
     c92:	39 f7       	brne	.-50     	; 0xc62 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidWriteData(Copy_pchString[i]);
	}
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <CLCD_voidGoToXYPos>:

/*Description: This API Shall Go to a certain location on the LCD*/
void CLCD_voidGoToXYPos(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <CLCD_voidGoToXYPos+0x6>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	8a 83       	std	Y+2, r24	; 0x02
     cae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRamAdd;
	if(Copy_u8YPos==CLCD_u8_LINE_ONE)
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	88 23       	and	r24, r24
     cb4:	19 f4       	brne	.+6      	; 0xcbc <CLCD_voidGoToXYPos+0x1c>
	{
		Local_u8DDRamAdd=Copy_u8XPos;
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <CLCD_voidGoToXYPos+0x28>
	}
	else if(Copy_u8YPos==CLCD_u8_LINE_TWO)
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	19 f4       	brne	.+6      	; 0xcc8 <CLCD_voidGoToXYPos+0x28>
	{
		Local_u8DDRamAdd=Copy_u8XPos+CLCD_u8_LINE_TWO_ADD_OFFSET;
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	80 5c       	subi	r24, 0xC0	; 192
     cc6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	CLCD_voidWriteCmd(Local_u8DDRamAdd | CLCD_u8_SET_DDRAM_ADD_COMM);
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <CLCD_voidSetEnablePulse>:


static void CLCD_voidSetEnablePulse(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
     ce4:	84 e4       	ldi	r24, 0x44	; 68
     ce6:	62 e0       	ldi	r22, 0x02	; 2
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Delay_ms(1);
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
     cfa:	84 e4       	ldi	r24, 0x44	; 68
     cfc:	62 e0       	ldi	r22, 0x02	; 2
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Delay_ms(1);
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>

}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <CLCD_voidSetHalfDataPort>:

static void CLCD_voidSetHalfDataPort(u8 Copy_u8Data)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <CLCD_voidSetHalfDataPort+0x6>
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8BitVal;

	Local_u8BitVal=GET_BIT(Copy_u8Data,0);
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	81 70       	andi	r24, 0x01	; 1
     d26:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D0_PORT,CLCD_u8_D4_PIN,Local_u8BitVal);
     d28:	82 e4       	ldi	r24, 0x42	; 66
     d2a:	64 e0       	ldi	r22, 0x04	; 4
     d2c:	49 81       	ldd	r20, Y+1	; 0x01
     d2e:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,1);
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	82 70       	andi	r24, 0x02	; 2
     d3a:	90 70       	andi	r25, 0x00	; 0
     d3c:	95 95       	asr	r25
     d3e:	87 95       	ror	r24
     d40:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D1_PORT,CLCD_u8_D5_PIN,Local_u8BitVal);
     d42:	82 e4       	ldi	r24, 0x42	; 66
     d44:	65 e0       	ldi	r22, 0x05	; 5
     d46:	49 81       	ldd	r20, Y+1	; 0x01
     d48:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,2);
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	84 70       	andi	r24, 0x04	; 4
     d54:	90 70       	andi	r25, 0x00	; 0
     d56:	95 95       	asr	r25
     d58:	87 95       	ror	r24
     d5a:	95 95       	asr	r25
     d5c:	87 95       	ror	r24
     d5e:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D2_PORT,CLCD_u8_D6_PIN,Local_u8BitVal);
     d60:	82 e4       	ldi	r24, 0x42	; 66
     d62:	66 e0       	ldi	r22, 0x06	; 6
     d64:	49 81       	ldd	r20, Y+1	; 0x01
     d66:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,3);
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	88 70       	andi	r24, 0x08	; 8
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	95 95       	asr	r25
     d76:	87 95       	ror	r24
     d78:	95 95       	asr	r25
     d7a:	87 95       	ror	r24
     d7c:	95 95       	asr	r25
     d7e:	87 95       	ror	r24
     d80:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D3_PORT,CLCD_u8_D7_PIN,Local_u8BitVal);
     d82:	82 e4       	ldi	r24, 0x42	; 66
     d84:	67 e0       	ldi	r22, 0x07	; 7
     d86:	49 81       	ldd	r20, Y+1	; 0x01
     d88:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>

}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <CLCD_voidSetDataPort>:

static void CLCD_voidSetDataPort(u8 Copy_u8Data)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <CLCD_voidSetDataPort+0x6>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8BitVal;

	Local_u8BitVal=GET_BIT(Copy_u8Data,0);
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	81 70       	andi	r24, 0x01	; 1
     da6:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D0_PORT,CLCD_u8_D0_PIN,Local_u8BitVal);
     da8:	82 e4       	ldi	r24, 0x42	; 66
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	49 81       	ldd	r20, Y+1	; 0x01
     dae:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,1);
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	82 70       	andi	r24, 0x02	; 2
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	95 95       	asr	r25
     dbe:	87 95       	ror	r24
     dc0:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D1_PORT,CLCD_u8_D1_PIN,Local_u8BitVal);
     dc2:	82 e4       	ldi	r24, 0x42	; 66
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	49 81       	ldd	r20, Y+1	; 0x01
     dc8:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,2);
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	84 70       	andi	r24, 0x04	; 4
     dd4:	90 70       	andi	r25, 0x00	; 0
     dd6:	95 95       	asr	r25
     dd8:	87 95       	ror	r24
     dda:	95 95       	asr	r25
     ddc:	87 95       	ror	r24
     dde:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D2_PORT,CLCD_u8_D2_PIN,Local_u8BitVal);
     de0:	82 e4       	ldi	r24, 0x42	; 66
     de2:	62 e0       	ldi	r22, 0x02	; 2
     de4:	49 81       	ldd	r20, Y+1	; 0x01
     de6:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,3);
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	88 70       	andi	r24, 0x08	; 8
     df2:	90 70       	andi	r25, 0x00	; 0
     df4:	95 95       	asr	r25
     df6:	87 95       	ror	r24
     df8:	95 95       	asr	r25
     dfa:	87 95       	ror	r24
     dfc:	95 95       	asr	r25
     dfe:	87 95       	ror	r24
     e00:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D3_PORT,CLCD_u8_D3_PIN,Local_u8BitVal);
     e02:	82 e4       	ldi	r24, 0x42	; 66
     e04:	63 e0       	ldi	r22, 0x03	; 3
     e06:	49 81       	ldd	r20, Y+1	; 0x01
     e08:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,4);
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	80 71       	andi	r24, 0x10	; 16
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	95 95       	asr	r25
     e18:	87 95       	ror	r24
     e1a:	95 95       	asr	r25
     e1c:	87 95       	ror	r24
     e1e:	95 95       	asr	r25
     e20:	87 95       	ror	r24
     e22:	95 95       	asr	r25
     e24:	87 95       	ror	r24
     e26:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D4_PORT,CLCD_u8_D4_PIN,Local_u8BitVal);
     e28:	82 e4       	ldi	r24, 0x42	; 66
     e2a:	64 e0       	ldi	r22, 0x04	; 4
     e2c:	49 81       	ldd	r20, Y+1	; 0x01
     e2e:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,5);
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	80 72       	andi	r24, 0x20	; 32
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	95 95       	asr	r25
     e3e:	87 95       	ror	r24
     e40:	95 95       	asr	r25
     e42:	87 95       	ror	r24
     e44:	95 95       	asr	r25
     e46:	87 95       	ror	r24
     e48:	95 95       	asr	r25
     e4a:	87 95       	ror	r24
     e4c:	95 95       	asr	r25
     e4e:	87 95       	ror	r24
     e50:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D5_PORT,CLCD_u8_D5_PIN,Local_u8BitVal);
     e52:	82 e4       	ldi	r24, 0x42	; 66
     e54:	65 e0       	ldi	r22, 0x05	; 5
     e56:	49 81       	ldd	r20, Y+1	; 0x01
     e58:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,6);
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	80 74       	andi	r24, 0x40	; 64
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	08 2e       	mov	r0, r24
     e68:	89 2f       	mov	r24, r25
     e6a:	00 0c       	add	r0, r0
     e6c:	88 1f       	adc	r24, r24
     e6e:	99 0b       	sbc	r25, r25
     e70:	00 0c       	add	r0, r0
     e72:	88 1f       	adc	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D6_PORT,CLCD_u8_D6_PIN,Local_u8BitVal);
     e78:	82 e4       	ldi	r24, 0x42	; 66
     e7a:	66 e0       	ldi	r22, 0x06	; 6
     e7c:	49 81       	ldd	r20, Y+1	; 0x01
     e7e:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
	Local_u8BitVal=GET_BIT(Copy_u8Data,7);
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	88 1f       	adc	r24, r24
     e86:	88 27       	eor	r24, r24
     e88:	88 1f       	adc	r24, r24
     e8a:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(CLCD_u8_D7_PORT,CLCD_u8_D7_PIN,Local_u8BitVal);
     e8c:	82 e4       	ldi	r24, 0x42	; 66
     e8e:	67 e0       	ldi	r22, 0x07	; 7
     e90:	49 81       	ldd	r20, Y+1	; 0x01
     e92:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <lcdnumberprinting>:

void lcdnumberprinting(u32 num)
{
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	ca 56       	subi	r28, 0x6A	; 106
     eae:	d0 40       	sbci	r29, 0x00	; 0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	fe 01       	movw	r30, r28
     ebc:	e9 59       	subi	r30, 0x99	; 153
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	60 83       	st	Z, r22
     ec2:	71 83       	std	Z+1, r23	; 0x01
     ec4:	82 83       	std	Z+2, r24	; 0x02
     ec6:	93 83       	std	Z+3, r25	; 0x03
	u8 arr[100];
	u8 i=0;
     ec8:	1a 82       	std	Y+2, r1	; 0x02
while(num>=0)
{
	arr[i]=(num%10);
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	08 2f       	mov	r16, r24
     ece:	10 e0       	ldi	r17, 0x00	; 0
     ed0:	fe 01       	movw	r30, r28
     ed2:	e9 59       	subi	r30, 0x99	; 153
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	a2 81       	ldd	r26, Z+2	; 0x02
     edc:	b3 81       	ldd	r27, Z+3	; 0x03
     ede:	2a e0       	ldi	r18, 0x0A	; 10
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__udivmodsi4>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	28 2f       	mov	r18, r24
     ef4:	ce 01       	movw	r24, r28
     ef6:	03 96       	adiw	r24, 0x03	; 3
     ef8:	fc 01       	movw	r30, r24
     efa:	e0 0f       	add	r30, r16
     efc:	f1 1f       	adc	r31, r17
     efe:	20 83       	st	Z, r18
	num=num/10;
     f00:	8e 01       	movw	r16, r28
     f02:	09 59       	subi	r16, 0x99	; 153
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	fe 01       	movw	r30, r28
     f08:	e9 59       	subi	r30, 0x99	; 153
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	a2 81       	ldd	r26, Z+2	; 0x02
     f12:	b3 81       	ldd	r27, Z+3	; 0x03
     f14:	2a e0       	ldi	r18, 0x0A	; 10
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__udivmodsi4>
     f24:	da 01       	movw	r26, r20
     f26:	c9 01       	movw	r24, r18
     f28:	f8 01       	movw	r30, r16
     f2a:	80 83       	st	Z, r24
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	a2 83       	std	Z+2, r26	; 0x02
     f30:	b3 83       	std	Z+3, r27	; 0x03
	i++;
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	8a 83       	std	Y+2, r24	; 0x02
	if(num==0)
     f38:	fe 01       	movw	r30, r28
     f3a:	e9 59       	subi	r30, 0x99	; 153
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	a2 81       	ldd	r26, Z+2	; 0x02
     f44:	b3 81       	ldd	r27, Z+3	; 0x03
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	a1 05       	cpc	r26, r1
     f4a:	b1 05       	cpc	r27, r1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <lcdnumberprinting+0xb0>
     f4e:	bd cf       	rjmp	.-134    	; 0xeca <lcdnumberprinting+0x2a>
		break;

}

for(u8 j=i-1; j>=0; j--)
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	81 50       	subi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
{
CLCD_voidWriteData(arr[j]+48);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	ce 01       	movw	r24, r28
     f5e:	03 96       	adiw	r24, 0x03	; 3
     f60:	fc 01       	movw	r30, r24
     f62:	e2 0f       	add	r30, r18
     f64:	f3 1f       	adc	r31, r19
     f66:	80 81       	ld	r24, Z
     f68:	80 5d       	subi	r24, 0xD0	; 208
     f6a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
if(j==0)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	88 23       	and	r24, r24
     f72:	21 f0       	breq	.+8      	; 0xf7c <lcdnumberprinting+0xdc>
	if(num==0)
		break;

}

for(u8 j=i-1; j>=0; j--)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	81 50       	subi	r24, 0x01	; 1
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	ed cf       	rjmp	.-38     	; 0xf56 <lcdnumberprinting+0xb6>
CLCD_voidWriteData(arr[j]+48);
if(j==0)
	break;
}

}
     f7c:	c6 59       	subi	r28, 0x96	; 150
     f7e:	df 4f       	sbci	r29, 0xFF	; 255
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"


void SetPinDirection(u8 Port,u8 Pin, u8 Direction)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <SetPinDirection+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <SetPinDirection+0x8>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	6a 83       	std	Y+2, r22	; 0x02
     fa6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3d 83       	std	Y+5, r19	; 0x05
     fb0:	2c 83       	std	Y+4, r18	; 0x04
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	82 34       	cpi	r24, 0x42	; 66
     fb8:	91 05       	cpc	r25, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <SetPinDirection+0x2a>
     fbc:	44 c0       	rjmp	.+136    	; 0x1046 <SetPinDirection+0xb2>
     fbe:	2c 81       	ldd	r18, Y+4	; 0x04
     fc0:	3d 81       	ldd	r19, Y+5	; 0x05
     fc2:	23 34       	cpi	r18, 0x43	; 67
     fc4:	31 05       	cpc	r19, r1
     fc6:	34 f4       	brge	.+12     	; 0xfd4 <SetPinDirection+0x40>
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	81 34       	cpi	r24, 0x41	; 65
     fce:	91 05       	cpc	r25, r1
     fd0:	71 f0       	breq	.+28     	; 0xfee <SetPinDirection+0x5a>
     fd2:	bc c0       	rjmp	.+376    	; 0x114c <SetPinDirection+0x1b8>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	23 34       	cpi	r18, 0x43	; 67
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <SetPinDirection+0x4c>
     fde:	5f c0       	rjmp	.+190    	; 0x109e <SetPinDirection+0x10a>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	84 34       	cpi	r24, 0x44	; 68
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <SetPinDirection+0x58>
     fea:	85 c0       	rjmp	.+266    	; 0x10f6 <SetPinDirection+0x162>
     fec:	af c0       	rjmp	.+350    	; 0x114c <SetPinDirection+0x1b8>
	{
	case 'A':
	if(Direction==0)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	88 23       	and	r24, r24
     ff2:	a9 f4       	brne	.+42     	; 0x101e <SetPinDirection+0x8a>
	{
		DDRA &= ~(1<<Pin);
     ff4:	aa e3       	ldi	r26, 0x3A	; 58
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ea e3       	ldi	r30, 0x3A	; 58
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <SetPinDirection+0x7e>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <SetPinDirection+0x7a>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	97 c0       	rjmp	.+302    	; 0x114c <SetPinDirection+0x1b8>
		
	}
	else
	{
		DDRA|= (1<<Pin);
    101e:	aa e3       	ldi	r26, 0x3A	; 58
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ea e3       	ldi	r30, 0x3A	; 58
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <SetPinDirection+0xa8>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <SetPinDirection+0xa4>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	83 c0       	rjmp	.+262    	; 0x114c <SetPinDirection+0x1b8>
	}
	break;
	
	case 'B':
	if(Direction==0)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	88 23       	and	r24, r24
    104a:	a9 f4       	brne	.+42     	; 0x1076 <SetPinDirection+0xe2>
	{
		DDRB &= ~(1<<Pin);
    104c:	a7 e3       	ldi	r26, 0x37	; 55
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e7 e3       	ldi	r30, 0x37	; 55
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <SetPinDirection+0xd6>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <SetPinDirection+0xd2>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	6b c0       	rjmp	.+214    	; 0x114c <SetPinDirection+0x1b8>
		
	}
	else
	{
		DDRB|= (1<<Pin);
    1076:	a7 e3       	ldi	r26, 0x37	; 55
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e3       	ldi	r30, 0x37	; 55
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <SetPinDirection+0x100>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <SetPinDirection+0xfc>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	57 c0       	rjmp	.+174    	; 0x114c <SetPinDirection+0x1b8>
		
	}
	break;
	
	case 'C':
	if(Direction==0)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	88 23       	and	r24, r24
    10a2:	a9 f4       	brne	.+42     	; 0x10ce <SetPinDirection+0x13a>
	{
		DDRC &=  ~(1<<Pin);
    10a4:	a4 e3       	ldi	r26, 0x34	; 52
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e4 e3       	ldi	r30, 0x34	; 52
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <SetPinDirection+0x12e>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <SetPinDirection+0x12a>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	3f c0       	rjmp	.+126    	; 0x114c <SetPinDirection+0x1b8>
		
		
	}
	else
	{
		DDRC|= (1<<Pin);
    10ce:	a4 e3       	ldi	r26, 0x34	; 52
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <SetPinDirection+0x158>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <SetPinDirection+0x154>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	2b c0       	rjmp	.+86     	; 0x114c <SetPinDirection+0x1b8>
		
	}
	break;
	
	case 'D':
	if(Direction==0)
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 23       	and	r24, r24
    10fa:	a9 f4       	brne	.+42     	; 0x1126 <SetPinDirection+0x192>
	{
		DDRD &= ~(1<<Pin);
    10fc:	a1 e3       	ldi	r26, 0x31	; 49
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e1 e3       	ldi	r30, 0x31	; 49
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <SetPinDirection+0x186>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <SetPinDirection+0x182>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	13 c0       	rjmp	.+38     	; 0x114c <SetPinDirection+0x1b8>
		
		
	}
	else
	{
		DDRD|= (1<<Pin);
    1126:	a1 e3       	ldi	r26, 0x31	; 49
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e1 e3       	ldi	r30, 0x31	; 49
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <SetPinDirection+0x1b0>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <SetPinDirection+0x1ac>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
		
	}
	
	
	
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <SetPinValue>:


void SetPinValue(u8 Port,u8 Pin, u8 Value)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <SetPinValue+0x6>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <SetPinValue+0x8>
    1164:	0f 92       	push	r0
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	6a 83       	std	Y+2, r22	; 0x02
    116e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3d 83       	std	Y+5, r19	; 0x05
    1178:	2c 83       	std	Y+4, r18	; 0x04
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	82 34       	cpi	r24, 0x42	; 66
    1180:	91 05       	cpc	r25, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <SetPinValue+0x2a>
    1184:	44 c0       	rjmp	.+136    	; 0x120e <SetPinValue+0xb2>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	23 34       	cpi	r18, 0x43	; 67
    118c:	31 05       	cpc	r19, r1
    118e:	34 f4       	brge	.+12     	; 0x119c <SetPinValue+0x40>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	81 34       	cpi	r24, 0x41	; 65
    1196:	91 05       	cpc	r25, r1
    1198:	71 f0       	breq	.+28     	; 0x11b6 <SetPinValue+0x5a>
    119a:	bc c0       	rjmp	.+376    	; 0x1314 <SetPinValue+0x1b8>
    119c:	2c 81       	ldd	r18, Y+4	; 0x04
    119e:	3d 81       	ldd	r19, Y+5	; 0x05
    11a0:	23 34       	cpi	r18, 0x43	; 67
    11a2:	31 05       	cpc	r19, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <SetPinValue+0x4c>
    11a6:	5f c0       	rjmp	.+190    	; 0x1266 <SetPinValue+0x10a>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	84 34       	cpi	r24, 0x44	; 68
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <SetPinValue+0x58>
    11b2:	85 c0       	rjmp	.+266    	; 0x12be <SetPinValue+0x162>
    11b4:	af c0       	rjmp	.+350    	; 0x1314 <SetPinValue+0x1b8>
	{
	case 'A':
	if(Value==0)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 23       	and	r24, r24
    11ba:	a9 f4       	brne	.+42     	; 0x11e6 <SetPinValue+0x8a>
	{
		PORTA &= ~(1<<Pin);
    11bc:	ab e3       	ldi	r26, 0x3B	; 59
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <SetPinValue+0x7e>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <SetPinValue+0x7a>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	97 c0       	rjmp	.+302    	; 0x1314 <SetPinValue+0x1b8>
		
	}
	else
	{
		PORTA|= (1<<Pin);
    11e6:	ab e3       	ldi	r26, 0x3B	; 59
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e3       	ldi	r30, 0x3B	; 59
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <SetPinValue+0xa8>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <SetPinValue+0xa4>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	83 c0       	rjmp	.+262    	; 0x1314 <SetPinValue+0x1b8>
	}
	break;
	
	case 'B':
	if(Value==0)
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 23       	and	r24, r24
    1212:	a9 f4       	brne	.+42     	; 0x123e <SetPinValue+0xe2>
	{
		PORTB &= ~(1<<Pin);
    1214:	a8 e3       	ldi	r26, 0x38	; 56
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e8 e3       	ldi	r30, 0x38	; 56
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <SetPinValue+0xd6>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <SetPinValue+0xd2>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	6b c0       	rjmp	.+214    	; 0x1314 <SetPinValue+0x1b8>
		
	}
	else
	{
		PORTB|= (1<<Pin);
    123e:	a8 e3       	ldi	r26, 0x38	; 56
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e8 e3       	ldi	r30, 0x38	; 56
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <SetPinValue+0x100>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <SetPinValue+0xfc>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	57 c0       	rjmp	.+174    	; 0x1314 <SetPinValue+0x1b8>
		
	}
	break;
	
	case 'C':
	if(Value==0)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 23       	and	r24, r24
    126a:	a9 f4       	brne	.+42     	; 0x1296 <SetPinValue+0x13a>
	{
		PORTC &=  ~(1<<Pin);
    126c:	a5 e3       	ldi	r26, 0x35	; 53
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <SetPinValue+0x12e>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <SetPinValue+0x12a>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <SetPinValue+0x1b8>
		
		
	}
	else
	{
		PORTC|= (1<<Pin);
    1296:	a5 e3       	ldi	r26, 0x35	; 53
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <SetPinValue+0x158>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <SetPinValue+0x154>
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	2b c0       	rjmp	.+86     	; 0x1314 <SetPinValue+0x1b8>
		
	}
	break;
	
	case 'D':
	if(Value==0)
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 23       	and	r24, r24
    12c2:	a9 f4       	brne	.+42     	; 0x12ee <SetPinValue+0x192>
	{
		PORTD &= ~(1<<Pin);
    12c4:	a2 e3       	ldi	r26, 0x32	; 50
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e2 e3       	ldi	r30, 0x32	; 50
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <SetPinValue+0x186>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <SetPinValue+0x182>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	13 c0       	rjmp	.+38     	; 0x1314 <SetPinValue+0x1b8>
		
		
	}
	else
	{
		PORTD|= (1<<Pin);
    12ee:	a2 e3       	ldi	r26, 0x32	; 50
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e2 e3       	ldi	r30, 0x32	; 50
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <SetPinValue+0x1b0>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <SetPinValue+0x1ac>
    1310:	84 2b       	or	r24, r20
    1312:	8c 93       	st	X, r24
		
	}
	
	
	
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <SetPortDirecton>:

void SetPortDirecton(u8 Port,u8 Value)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <SetPortDirecton+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <SetPortDirecton+0x8>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3c 83       	std	Y+4, r19	; 0x04
    133c:	2b 83       	std	Y+3, r18	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	82 34       	cpi	r24, 0x42	; 66
    1344:	91 05       	cpc	r25, r1
    1346:	d9 f0       	breq	.+54     	; 0x137e <SetPortDirecton+0x5a>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	23 34       	cpi	r18, 0x43	; 67
    134e:	31 05       	cpc	r19, r1
    1350:	34 f4       	brge	.+12     	; 0x135e <SetPortDirecton+0x3a>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	81 34       	cpi	r24, 0x41	; 65
    1358:	91 05       	cpc	r25, r1
    135a:	61 f0       	breq	.+24     	; 0x1374 <SetPortDirecton+0x50>
    135c:	1e c0       	rjmp	.+60     	; 0x139a <SetPortDirecton+0x76>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	23 34       	cpi	r18, 0x43	; 67
    1364:	31 05       	cpc	r19, r1
    1366:	81 f0       	breq	.+32     	; 0x1388 <SetPortDirecton+0x64>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	84 34       	cpi	r24, 0x44	; 68
    136e:	91 05       	cpc	r25, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <SetPortDirecton+0x6e>
    1372:	13 c0       	rjmp	.+38     	; 0x139a <SetPortDirecton+0x76>
	{
	case 'A':
		DDRA=Value;
    1374:	ea e3       	ldi	r30, 0x3A	; 58
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	0e c0       	rjmp	.+28     	; 0x139a <SetPortDirecton+0x76>
		break;
	case 'B':
			DDRB=Value;
    137e:	e7 e3       	ldi	r30, 0x37	; 55
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	09 c0       	rjmp	.+18     	; 0x139a <SetPortDirecton+0x76>
			break;
	case 'C':
			DDRC=Value;
    1388:	e4 e3       	ldi	r30, 0x34	; 52
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	04 c0       	rjmp	.+8      	; 0x139a <SetPortDirecton+0x76>
			break;
	case 'D':
			DDRD=Value;
    1392:	e1 e3       	ldi	r30, 0x31	; 49
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
			break;
	}
}
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <SetPortValue>:

void SetPortValue(u8 Port,u8 Value)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <SetPortValue+0x6>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <SetPortValue+0x8>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3c 83       	std	Y+4, r19	; 0x04
    13c0:	2b 83       	std	Y+3, r18	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	82 34       	cpi	r24, 0x42	; 66
    13c8:	91 05       	cpc	r25, r1
    13ca:	d9 f0       	breq	.+54     	; 0x1402 <SetPortValue+0x5a>
    13cc:	2b 81       	ldd	r18, Y+3	; 0x03
    13ce:	3c 81       	ldd	r19, Y+4	; 0x04
    13d0:	23 34       	cpi	r18, 0x43	; 67
    13d2:	31 05       	cpc	r19, r1
    13d4:	34 f4       	brge	.+12     	; 0x13e2 <SetPortValue+0x3a>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	81 34       	cpi	r24, 0x41	; 65
    13dc:	91 05       	cpc	r25, r1
    13de:	61 f0       	breq	.+24     	; 0x13f8 <SetPortValue+0x50>
    13e0:	1e c0       	rjmp	.+60     	; 0x141e <SetPortValue+0x76>
    13e2:	2b 81       	ldd	r18, Y+3	; 0x03
    13e4:	3c 81       	ldd	r19, Y+4	; 0x04
    13e6:	23 34       	cpi	r18, 0x43	; 67
    13e8:	31 05       	cpc	r19, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <SetPortValue+0x64>
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	84 34       	cpi	r24, 0x44	; 68
    13f2:	91 05       	cpc	r25, r1
    13f4:	81 f0       	breq	.+32     	; 0x1416 <SetPortValue+0x6e>
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <SetPortValue+0x76>
	{
	case 'A':
		PORTA=Value;
    13f8:	eb e3       	ldi	r30, 0x3B	; 59
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	80 83       	st	Z, r24
    1400:	0e c0       	rjmp	.+28     	; 0x141e <SetPortValue+0x76>
		break;
	case 'B':
			PORTB=Value;
    1402:	e8 e3       	ldi	r30, 0x38	; 56
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	80 83       	st	Z, r24
    140a:	09 c0       	rjmp	.+18     	; 0x141e <SetPortValue+0x76>
			break;
	case 'C':
			PORTC=Value;
    140c:	e5 e3       	ldi	r30, 0x35	; 53
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	80 83       	st	Z, r24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <SetPortValue+0x76>
			break;
	case 'D':
			PORTD=Value;
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	80 83       	st	Z, r24
			break;
	}
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <GetPinVal>:


u8 GetPinVal(u8 Port,u8 Pin)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <GetPinVal+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GetPinVal+0x8>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	8a 83       	std	Y+2, r24	; 0x02
    143c:	6b 83       	std	Y+3, r22	; 0x03
	u8 x;
	switch(Port)
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3d 83       	std	Y+5, r19	; 0x05
    1446:	2c 83       	std	Y+4, r18	; 0x04
    1448:	4c 81       	ldd	r20, Y+4	; 0x04
    144a:	5d 81       	ldd	r21, Y+5	; 0x05
    144c:	42 34       	cpi	r20, 0x42	; 66
    144e:	51 05       	cpc	r21, r1
    1450:	b1 f1       	breq	.+108    	; 0x14be <GetPinVal+0x92>
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	9d 81       	ldd	r25, Y+5	; 0x05
    1456:	83 34       	cpi	r24, 0x43	; 67
    1458:	91 05       	cpc	r25, r1
    145a:	34 f4       	brge	.+12     	; 0x1468 <GetPinVal+0x3c>
    145c:	2c 81       	ldd	r18, Y+4	; 0x04
    145e:	3d 81       	ldd	r19, Y+5	; 0x05
    1460:	21 34       	cpi	r18, 0x41	; 65
    1462:	31 05       	cpc	r19, r1
    1464:	71 f0       	breq	.+28     	; 0x1482 <GetPinVal+0x56>
    1466:	84 c0       	rjmp	.+264    	; 0x1570 <GetPinVal+0x144>
    1468:	4c 81       	ldd	r20, Y+4	; 0x04
    146a:	5d 81       	ldd	r21, Y+5	; 0x05
    146c:	43 34       	cpi	r20, 0x43	; 67
    146e:	51 05       	cpc	r21, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <GetPinVal+0x48>
    1472:	43 c0       	rjmp	.+134    	; 0x14fa <GetPinVal+0xce>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	84 34       	cpi	r24, 0x44	; 68
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <GetPinVal+0x54>
    147e:	5b c0       	rjmp	.+182    	; 0x1536 <GetPinVal+0x10a>
    1480:	77 c0       	rjmp	.+238    	; 0x1570 <GetPinVal+0x144>
	{
	case 'A':
			x=GET_BIT(PINA,Pin);
    1482:	e9 e3       	ldi	r30, 0x39	; 57
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GetPinVal+0x70>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GetPinVal+0x6c>
    14a0:	9a 01       	movw	r18, r20
    14a2:	28 23       	and	r18, r24
    14a4:	39 23       	and	r19, r25
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <GetPinVal+0x88>
    14b0:	55 95       	asr	r21
    14b2:	47 95       	ror	r20
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <GetPinVal+0x84>
    14b8:	ca 01       	movw	r24, r20
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	59 c0       	rjmp	.+178    	; 0x1570 <GetPinVal+0x144>
		break;
	case 'B':
			x=GET_BIT(PINB,Pin);
    14be:	e6 e3       	ldi	r30, 0x36	; 54
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <GetPinVal+0xac>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	2a 95       	dec	r18
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <GetPinVal+0xa8>
    14dc:	9a 01       	movw	r18, r20
    14de:	28 23       	and	r18, r24
    14e0:	39 23       	and	r19, r25
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GetPinVal+0xc4>
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GetPinVal+0xc0>
    14f4:	ca 01       	movw	r24, r20
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	3b c0       	rjmp	.+118    	; 0x1570 <GetPinVal+0x144>
			break;
	case 'C':
			x=GET_BIT(PINC,Pin);
    14fa:	e3 e3       	ldi	r30, 0x33	; 51
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <GetPinVal+0xe8>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	2a 95       	dec	r18
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <GetPinVal+0xe4>
    1518:	9a 01       	movw	r18, r20
    151a:	28 23       	and	r18, r24
    151c:	39 23       	and	r19, r25
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <GetPinVal+0x100>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <GetPinVal+0xfc>
    1530:	ca 01       	movw	r24, r20
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <GetPinVal+0x144>
			break;
	case 'D':
			x=GET_BIT(PIND,Pin);
    1536:	e0 e3       	ldi	r30, 0x30	; 48
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GetPinVal+0x124>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	2a 95       	dec	r18
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GetPinVal+0x120>
    1554:	9a 01       	movw	r18, r20
    1556:	28 23       	and	r18, r24
    1558:	39 23       	and	r19, r25
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a9 01       	movw	r20, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <GetPinVal+0x13c>
    1564:	55 95       	asr	r21
    1566:	47 95       	ror	r20
    1568:	8a 95       	dec	r24
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <GetPinVal+0x138>
    156c:	ca 01       	movw	r24, r20
    156e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return x;
    1570:	89 81       	ldd	r24, Y+1	; 0x01
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <Delay_ms>:
#include "std_types.h"
#include "Delay_ms.h"

void Delay_ms(u32 Value)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	2c 97       	sbiw	r28, 0x0c	; 12
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	69 87       	std	Y+9, r22	; 0x09
    1598:	7a 87       	std	Y+10, r23	; 0x0a
    159a:	8b 87       	std	Y+11, r24	; 0x0b
    159c:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 count=(u32)(float)(Value-tm)/t1;
    159e:	69 85       	ldd	r22, Y+9	; 0x09
    15a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    15a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a6:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	24 e0       	ldi	r18, 0x04	; 4
    15b4:	36 e5       	ldi	r19, 0x56	; 86
    15b6:	42 e2       	ldi	r20, 0x22	; 34
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	2f ef       	ldi	r18, 0xFF	; 255
    15e0:	37 ee       	ldi	r19, 0xE7	; 231
    15e2:	40 eb       	ldi	r20, 0xB0	; 176
    15e4:	5b e3       	ldi	r21, 0x3B	; 59
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	ab 83       	std	Y+3, r26	; 0x03
    1600:	bc 83       	std	Y+4, r27	; 0x04
	
	for(i=0;i<count;i++)
    1602:	1d 82       	std	Y+5, r1	; 0x05
    1604:	1e 82       	std	Y+6, r1	; 0x06
    1606:	1f 82       	std	Y+7, r1	; 0x07
    1608:	18 86       	std	Y+8, r1	; 0x08
    160a:	0c c0       	rjmp	.+24     	; 0x1624 <Delay_ms+0xa2>
	{
		
		asm("NOP");
    160c:	00 00       	nop
void Delay_ms(u32 Value)
{
	u32 i;
	u32 count=(u32)(float)(Value-tm)/t1;
	
	for(i=0;i<count;i++)
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	af 81       	ldd	r26, Y+7	; 0x07
    1614:	b8 85       	ldd	r27, Y+8	; 0x08
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	a1 1d       	adc	r26, r1
    161a:	b1 1d       	adc	r27, r1
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	af 83       	std	Y+7, r26	; 0x07
    1622:	b8 87       	std	Y+8, r27	; 0x08
    1624:	2d 81       	ldd	r18, Y+5	; 0x05
    1626:	3e 81       	ldd	r19, Y+6	; 0x06
    1628:	4f 81       	ldd	r20, Y+7	; 0x07
    162a:	58 85       	ldd	r21, Y+8	; 0x08
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	ab 81       	ldd	r26, Y+3	; 0x03
    1632:	bc 81       	ldd	r27, Y+4	; 0x04
    1634:	28 17       	cp	r18, r24
    1636:	39 07       	cpc	r19, r25
    1638:	4a 07       	cpc	r20, r26
    163a:	5b 07       	cpc	r21, r27
    163c:	38 f3       	brcs	.-50     	; 0x160c <Delay_ms+0x8a>
		
		asm("NOP");
		
	}
	
    163e:	2c 96       	adiw	r28, 0x0c	; 12
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <INT_voidEnableGlobal>:




void INT_voidEnableGlobal(void)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1658:	af e5       	ldi	r26, 0x5F	; 95
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ef e5       	ldi	r30, 0x5F	; 95
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 68       	ori	r24, 0x80	; 128
    1664:	8c 93       	st	X, r24
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <INT_voidDisableGlobal>:
void INT_voidDisableGlobal(void)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1674:	af e5       	ldi	r26, 0x5F	; 95
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	ef e5       	ldi	r30, 0x5F	; 95
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	8f 77       	andi	r24, 0x7F	; 127
    1680:	8c 93       	st	X, r24
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <PortInitialize>:




void PortInitialize(void)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1690:	ea e3       	ldi	r30, 0x3A	; 58
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	88 e0       	ldi	r24, 0x08	; 8
    1696:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1698:	e7 e3       	ldi	r30, 0x37	; 55
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    16a0:	e4 e3       	ldi	r30, 0x34	; 52
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;	
    16a6:	e1 e3       	ldi	r30, 0x31	; 49
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	87 e0       	ldi	r24, 0x07	; 7
    16ac:	80 83       	st	Z, r24
	
	PORTA=PORTA_INITIAL_VALUE;
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	87 e0       	ldi	r24, 0x07	; 7
    16b4:	80 83       	st	Z, r24
	PORTB=PORTB_INITIAL_VALUE;
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    16bc:	e5 e3       	ldi	r30, 0x35	; 53
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    16c2:	e2 e3       	ldi	r30, 0x32	; 50
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	10 82       	st	Z, r1


}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <Timer0_voidInit>:

static void (*TIMER0_pvCallBack)(void)=NULL;


void Timer0_voidInit(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TIMER0_WGM00);
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	87 7f       	andi	r24, 0xF7	; 247
    16e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TIMER0_WGM01);
    16e4:	a3 e5       	ldi	r26, 0x53	; 83
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e3 e5       	ldi	r30, 0x53	; 83
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8f 7b       	andi	r24, 0xBF	; 191
    16f0:	8c 93       	st	X, r24

	CLR_BIT(TCCR0,TIMER0_CS02) ;
    16f2:	a3 e5       	ldi	r26, 0x53	; 83
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e3 e5       	ldi	r30, 0x53	; 83
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8b 7f       	andi	r24, 0xFB	; 251
    16fe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TIMER0_CS01) ;
    1700:	a3 e5       	ldi	r26, 0x53	; 83
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e3 e5       	ldi	r30, 0x53	; 83
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TIMER0_CS00) ;
    170e:	a3 e5       	ldi	r26, 0x53	; 83
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e3 e5       	ldi	r30, 0x53	; 83
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	81 60       	ori	r24, 0x01	; 1
    171a:	8c 93       	st	X, r24

	SET_BIT(TIMSK,TIMER0_TOIE0);
    171c:	a9 e5       	ldi	r26, 0x59	; 89
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e9 e5       	ldi	r30, 0x59	; 89
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	81 60       	ori	r24, 0x01	; 1
    1728:	8c 93       	st	X, r24
	TCNT0=131;
    172a:	e2 e5       	ldi	r30, 0x52	; 82
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	83 e8       	ldi	r24, 0x83	; 131
    1730:	80 83       	st	Z, r24
}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <Timer0_voidSetCallBack>:



void Timer0_voidSetCallBack(void(*Copy_pvCallBackPtr)(void))
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <Timer0_voidSetCallBack+0x6>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackPtr!=NULL)
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	31 f0       	breq	.+12     	; 0x175a <Timer0_voidSetCallBack+0x22>
	TIMER0_pvCallBack=Copy_pvCallBackPtr;
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	90 93 a1 01 	sts	0x01A1, r25
    1756:	80 93 a0 01 	sts	0x01A0, r24

}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <__vector_11>:


void __vector_11(void) __attribute__((signal));

void __vector_11(void)
{
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	2f 93       	push	r18
    1770:	3f 93       	push	r19
    1772:	4f 93       	push	r20
    1774:	5f 93       	push	r21
    1776:	6f 93       	push	r22
    1778:	7f 93       	push	r23
    177a:	8f 93       	push	r24
    177c:	9f 93       	push	r25
    177e:	af 93       	push	r26
    1780:	bf 93       	push	r27
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBack!=NULL)
    178e:	80 91 a0 01 	lds	r24, 0x01A0
    1792:	90 91 a1 01 	lds	r25, 0x01A1
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	29 f0       	breq	.+10     	; 0x17a4 <__vector_11+0x40>
	{
		TIMER0_pvCallBack();
    179a:	e0 91 a0 01 	lds	r30, 0x01A0
    179e:	f0 91 a1 01 	lds	r31, 0x01A1
    17a2:	09 95       	icall
	}
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <main>:
u8 SWHrVar=0,SWMinVar=0,SWSecVar=0;

u8 TimeCell=1,AlCell=1,SWstatus=0,SWIncerementFlag;

void main(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	PortInitialize();
    17d2:	0e 94 44 0b 	call	0x1688	; 0x1688 <PortInitialize>
	CLCD_voidInitialize();
    17d6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <CLCD_voidInitialize>
	Timer0_voidSetCallBack(&TimeInc);
    17da:	84 e9       	ldi	r24, 0x94	; 148
    17dc:	9c e0       	ldi	r25, 0x0C	; 12
    17de:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Timer0_voidSetCallBack>
	Timer0_voidInit();
    17e2:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Timer0_voidInit>
	INT_voidEnableGlobal();
    17e6:	0e 94 28 0b 	call	0x1650	; 0x1650 <INT_voidEnableGlobal>

	while(1)
	{

		if(!(GetPinVal('A',0)))
    17ea:	81 e4       	ldi	r24, 0x41	; 65
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	0e 94 16 0a 	call	0x142c	; 0x142c <GetPinVal>
    17f2:	88 23       	and	r24, r24
    17f4:	51 f5       	brne	.+84     	; 0x184a <main+0x80>
		{
			if(GetPinVal('A',3))
    17f6:	81 e4       	ldi	r24, 0x41	; 65
    17f8:	63 e0       	ldi	r22, 0x03	; 3
    17fa:	0e 94 16 0a 	call	0x142c	; 0x142c <GetPinVal>
    17fe:	88 23       	and	r24, r24
    1800:	89 f0       	breq	.+34     	; 0x1824 <main+0x5a>
			{
				AlMinVar++;
    1802:	80 91 a8 01 	lds	r24, 0x01A8
    1806:	8f 5f       	subi	r24, 0xFF	; 255
    1808:	80 93 a8 01 	sts	0x01A8, r24
				SetPinValue('A',3,0);
    180c:	81 e4       	ldi	r24, 0x41	; 65
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
				Delay_ms(500);
    1816:	64 ef       	ldi	r22, 0xF4	; 244
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
    1822:	13 c0       	rjmp	.+38     	; 0x184a <main+0x80>
			}
			else
			{
			Mode++;						//ReadMode
    1824:	80 91 a2 01 	lds	r24, 0x01A2
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	80 93 a2 01 	sts	0x01A2, r24
			if(Mode==3)	Mode=0;
    182e:	80 91 a2 01 	lds	r24, 0x01A2
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	11 f4       	brne	.+4      	; 0x183a <main+0x70>
    1836:	10 92 a2 01 	sts	0x01A2, r1
			flag=0;
    183a:	10 92 9c 01 	sts	0x019C, r1
			Delay_ms(500);
    183e:	64 ef       	ldi	r22, 0xF4	; 244
    1840:	71 e0       	ldi	r23, 0x01	; 1
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
			}
		}


		if(Mode==0)			TimeDisplay();
    184a:	80 91 a2 01 	lds	r24, 0x01A2
    184e:	88 23       	and	r24, r24
    1850:	19 f4       	brne	.+6      	; 0x1858 <main+0x8e>
    1852:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <TimeDisplay>
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <main+0xa8>
		else if(Mode==1)	AlarmDisplay();		//Display
    1858:	80 91 a2 01 	lds	r24, 0x01A2
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	19 f4       	brne	.+6      	; 0x1866 <main+0x9c>
    1860:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <AlarmDisplay>
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <main+0xa8>
		else if(Mode==2)	SWDisplay();
    1866:	80 91 a2 01 	lds	r24, 0x01A2
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	11 f4       	brne	.+4      	; 0x1872 <main+0xa8>
    186e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <SWDisplay>

		if(!(GetPinVal('A',1)))
    1872:	81 e4       	ldi	r24, 0x41	; 65
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	0e 94 16 0a 	call	0x142c	; 0x142c <GetPinVal>
    187a:	88 23       	and	r24, r24
    187c:	d1 f4       	brne	.+52     	; 0x18b2 <main+0xe8>
		{
			if(Mode==0)				Time_AdjustCursor();
    187e:	80 91 a2 01 	lds	r24, 0x01A2
    1882:	88 23       	and	r24, r24
    1884:	19 f4       	brne	.+6      	; 0x188c <main+0xc2>
    1886:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Time_AdjustCursor>
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <main+0xdc>
			else if(Mode==1)		Alarm_AdjustCursor();		//ReadPos
    188c:	80 91 a2 01 	lds	r24, 0x01A2
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	19 f4       	brne	.+6      	; 0x189a <main+0xd0>
    1894:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <Alarm_AdjustCursor>
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <main+0xdc>
			else if(Mode==2)		SW_Start_Stop();
    189a:	80 91 a2 01 	lds	r24, 0x01A2
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	11 f4       	brne	.+4      	; 0x18a6 <main+0xdc>
    18a2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <SW_Start_Stop>
			Delay_ms(500);
    18a6:	64 ef       	ldi	r22, 0xF4	; 244
    18a8:	71 e0       	ldi	r23, 0x01	; 1
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
		}

		if(!(GetPinVal('A',2)))
    18b2:	81 e4       	ldi	r24, 0x41	; 65
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	0e 94 16 0a 	call	0x142c	; 0x142c <GetPinVal>
    18ba:	88 23       	and	r24, r24
    18bc:	d1 f4       	brne	.+52     	; 0x18f2 <main+0x128>
		{
			if(Mode==0)				Time_incerement();
    18be:	80 91 a2 01 	lds	r24, 0x01A2
    18c2:	88 23       	and	r24, r24
    18c4:	19 f4       	brne	.+6      	; 0x18cc <main+0x102>
    18c6:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <Time_incerement>
    18ca:	0d c0       	rjmp	.+26     	; 0x18e6 <main+0x11c>
			else if(Mode==1)		Alarm_incerement();			//ReadInc
    18cc:	80 91 a2 01 	lds	r24, 0x01A2
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	19 f4       	brne	.+6      	; 0x18da <main+0x110>
    18d4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Alarm_incerement>
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <main+0x11c>
			else if(Mode==2)		SW_Reset();
    18da:	80 91 a2 01 	lds	r24, 0x01A2
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <main+0x11c>
    18e2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <SW_Reset>
			Delay_ms(500);
    18e6:	64 ef       	ldi	r22, 0xF4	; 244
    18e8:	71 e0       	ldi	r23, 0x01	; 1
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Delay_ms>
		}

		if(HrVar==AlHrVar && MinVar==AlMinVar && CL==AlCL)
    18f2:	90 91 a3 01 	lds	r25, 0x01A3
    18f6:	80 91 a7 01 	lds	r24, 0x01A7
    18fa:	98 17       	cp	r25, r24
    18fc:	09 f0       	breq	.+2      	; 0x1900 <main+0x136>
    18fe:	75 cf       	rjmp	.-278    	; 0x17ea <main+0x20>
    1900:	90 91 a4 01 	lds	r25, 0x01A4
    1904:	80 91 a8 01 	lds	r24, 0x01A8
    1908:	98 17       	cp	r25, r24
    190a:	09 f0       	breq	.+2      	; 0x190e <main+0x144>
    190c:	6e cf       	rjmp	.-292    	; 0x17ea <main+0x20>
    190e:	90 91 a6 01 	lds	r25, 0x01A6
    1912:	80 91 9d 01 	lds	r24, 0x019D
    1916:	98 17       	cp	r25, r24
    1918:	09 f0       	breq	.+2      	; 0x191c <main+0x152>
    191a:	67 cf       	rjmp	.-306    	; 0x17ea <main+0x20>
		{
			SetPinValue('A',3,1);
    191c:	81 e4       	ldi	r24, 0x41	; 65
    191e:	63 e0       	ldi	r22, 0x03	; 3
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 ae 08 	call	0x115c	; 0x115c <SetPinValue>
    1926:	61 cf       	rjmp	.-318    	; 0x17ea <main+0x20>

00001928 <TimeInc>:
	}
}


void TimeInc(void)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
	static u16 count=0;
	TCNT0=131;
    1930:	e2 e5       	ldi	r30, 0x52	; 82
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	83 e8       	ldi	r24, 0x83	; 131
    1936:	80 83       	st	Z, r24
	if(count==1000)
    1938:	80 91 ad 01 	lds	r24, 0x01AD
    193c:	90 91 ae 01 	lds	r25, 0x01AE
    1940:	23 e0       	ldi	r18, 0x03	; 3
    1942:	88 3e       	cpi	r24, 0xE8	; 232
    1944:	92 07       	cpc	r25, r18
    1946:	09 f0       	breq	.+2      	; 0x194a <TimeInc+0x22>
    1948:	50 c0       	rjmp	.+160    	; 0x19ea <TimeInc+0xc2>
	{
		SecVar++;
    194a:	80 91 a5 01 	lds	r24, 0x01A5
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	80 93 a5 01 	sts	0x01A5, r24
		if(SecVar>59)
    1954:	80 91 a5 01 	lds	r24, 0x01A5
    1958:	8c 33       	cpi	r24, 0x3C	; 60
    195a:	38 f0       	brcs	.+14     	; 0x196a <TimeInc+0x42>
		{
			SecVar=0; MinVar++;
    195c:	10 92 a5 01 	sts	0x01A5, r1
    1960:	80 91 a4 01 	lds	r24, 0x01A4
    1964:	8f 5f       	subi	r24, 0xFF	; 255
    1966:	80 93 a4 01 	sts	0x01A4, r24
		}
		if(MinVar>59)
    196a:	80 91 a4 01 	lds	r24, 0x01A4
    196e:	8c 33       	cpi	r24, 0x3C	; 60
    1970:	38 f0       	brcs	.+14     	; 0x1980 <TimeInc+0x58>
		{
			MinVar=0; HrVar++;
    1972:	10 92 a4 01 	sts	0x01A4, r1
    1976:	80 91 a3 01 	lds	r24, 0x01A3
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	80 93 a3 01 	sts	0x01A3, r24
		}
		if(HrVar>11)
    1980:	80 91 a3 01 	lds	r24, 0x01A3
    1984:	8c 30       	cpi	r24, 0x0C	; 12
    1986:	40 f0       	brcs	.+16     	; 0x1998 <TimeInc+0x70>
		{
			HrVar=0; CL^=0x01;
    1988:	10 92 a3 01 	sts	0x01A3, r1
    198c:	80 91 a6 01 	lds	r24, 0x01A6
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	89 27       	eor	r24, r25
    1994:	80 93 a6 01 	sts	0x01A6, r24
		}

		if(SWIncerementFlag)
    1998:	80 91 af 01 	lds	r24, 0x01AF
    199c:	88 23       	and	r24, r24
    199e:	09 f1       	breq	.+66     	; 0x19e2 <TimeInc+0xba>
		{
			SWSecVar++;
    19a0:	80 91 ab 01 	lds	r24, 0x01AB
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	80 93 ab 01 	sts	0x01AB, r24
			if(SWSecVar>59)
    19aa:	80 91 ab 01 	lds	r24, 0x01AB
    19ae:	8c 33       	cpi	r24, 0x3C	; 60
    19b0:	38 f0       	brcs	.+14     	; 0x19c0 <TimeInc+0x98>
			{
				SWSecVar=0; SWMinVar++;
    19b2:	10 92 ab 01 	sts	0x01AB, r1
    19b6:	80 91 aa 01 	lds	r24, 0x01AA
    19ba:	8f 5f       	subi	r24, 0xFF	; 255
    19bc:	80 93 aa 01 	sts	0x01AA, r24
			}
			if(SWMinVar>59)
    19c0:	80 91 aa 01 	lds	r24, 0x01AA
    19c4:	8c 33       	cpi	r24, 0x3C	; 60
    19c6:	38 f0       	brcs	.+14     	; 0x19d6 <TimeInc+0xae>
			{
				SWMinVar=0; SWHrVar++;
    19c8:	10 92 aa 01 	sts	0x01AA, r1
    19cc:	80 91 a9 01 	lds	r24, 0x01A9
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	80 93 a9 01 	sts	0x01A9, r24
			}
			if(SWHrVar>11)
    19d6:	80 91 a9 01 	lds	r24, 0x01A9
    19da:	8c 30       	cpi	r24, 0x0C	; 12
    19dc:	10 f0       	brcs	.+4      	; 0x19e2 <TimeInc+0xba>
			{
				SWHrVar=0;
    19de:	10 92 a9 01 	sts	0x01A9, r1
			}
		}

		count=0;
    19e2:	10 92 ae 01 	sts	0x01AE, r1
    19e6:	10 92 ad 01 	sts	0x01AD, r1

	}
	count++;
    19ea:	80 91 ad 01 	lds	r24, 0x01AD
    19ee:	90 91 ae 01 	lds	r25, 0x01AE
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	90 93 ae 01 	sts	0x01AE, r25
    19f8:	80 93 ad 01 	sts	0x01AD, r24

}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <TimeDisplay>:


void TimeDisplay(void)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	if (flag==0)
    1a0a:	80 91 9c 01 	lds	r24, 0x019C
    1a0e:	88 23       	and	r24, r24
    1a10:	19 f4       	brne	.+6      	; 0x1a18 <TimeDisplay+0x16>
		CLCD_voidWriteCmd(1);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
	flag=100;
    1a18:	84 e6       	ldi	r24, 0x64	; 100
    1a1a:	80 93 9c 01 	sts	0x019C, r24

	CLCD_voidGoToXYPos(0,0);	//Initial place
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidGoToXYPos>
	CLCD_voidWriteString("TIME MODE: ");
    1a26:	80 e6       	ldi	r24, 0x60	; 96
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>
	CLCD_voidGoToXYPos(0,1);	//Initial place
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidGoToXYPos>

	if(HrVar<10)
    1a36:	80 91 a3 01 	lds	r24, 0x01A3
    1a3a:	8a 30       	cpi	r24, 0x0A	; 10
    1a3c:	70 f4       	brcc	.+28     	; 0x1a5a <TimeDisplay+0x58>
	{
		CLCD_voidWriteData('0');
    1a3e:	80 e3       	ldi	r24, 0x30	; 48
    1a40:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(HrVar);
    1a44:	80 91 a3 01 	lds	r24, 0x01A3
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e0       	ldi	r26, 0x00	; 0
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1a58:	0a c0       	rjmp	.+20     	; 0x1a6e <TimeDisplay+0x6c>
	}
	else
		lcdnumberprinting(HrVar);
    1a5a:	80 91 a3 01 	lds	r24, 0x01A3
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e0       	ldi	r26, 0x00	; 0
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
	CLCD_voidWriteString(":");
    1a6e:	8c e6       	ldi	r24, 0x6C	; 108
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

	if(MinVar<10)
    1a76:	80 91 a4 01 	lds	r24, 0x01A4
    1a7a:	8a 30       	cpi	r24, 0x0A	; 10
    1a7c:	70 f4       	brcc	.+28     	; 0x1a9a <TimeDisplay+0x98>
	{
		CLCD_voidWriteData('0');
    1a7e:	80 e3       	ldi	r24, 0x30	; 48
    1a80:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(MinVar);
    1a84:	80 91 a4 01 	lds	r24, 0x01A4
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1a98:	0a c0       	rjmp	.+20     	; 0x1aae <TimeDisplay+0xac>
	}
	else
		lcdnumberprinting(MinVar);
    1a9a:	80 91 a4 01 	lds	r24, 0x01A4
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e0       	ldi	r26, 0x00	; 0
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
	CLCD_voidWriteString(":");
    1aae:	8c e6       	ldi	r24, 0x6C	; 108
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

	if(SecVar<10)
    1ab6:	80 91 a5 01 	lds	r24, 0x01A5
    1aba:	8a 30       	cpi	r24, 0x0A	; 10
    1abc:	70 f4       	brcc	.+28     	; 0x1ada <TimeDisplay+0xd8>
	{
		CLCD_voidWriteData('0');
    1abe:	80 e3       	ldi	r24, 0x30	; 48
    1ac0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(SecVar);
    1ac4:	80 91 a5 01 	lds	r24, 0x01A5
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 e0       	ldi	r26, 0x00	; 0
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <TimeDisplay+0xec>
	}
	else
		lcdnumberprinting(SecVar);
    1ada:	80 91 a5 01 	lds	r24, 0x01A5
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
	CLCD_voidWriteString(" ");
    1aee:	8e e6       	ldi	r24, 0x6E	; 110
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

	if(CL==0)
    1af6:	80 91 a6 01 	lds	r24, 0x01A6
    1afa:	88 23       	and	r24, r24
    1afc:	29 f4       	brne	.+10     	; 0x1b08 <TimeDisplay+0x106>
		CLCD_voidWriteString("Am");
    1afe:	80 e7       	ldi	r24, 0x70	; 112
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <TimeDisplay+0x10e>
	else
		CLCD_voidWriteString("Pm");
    1b08:	83 e7       	ldi	r24, 0x73	; 115
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <Time_AdjustCursor>:


void Time_AdjustCursor(void)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
	if(TimeCell==10)
    1b1e:	80 91 9e 01 	lds	r24, 0x019E
    1b22:	8a 30       	cpi	r24, 0x0A	; 10
    1b24:	21 f4       	brne	.+8      	; 0x1b2e <Time_AdjustCursor+0x18>
		TimeCell=1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 9e 01 	sts	0x019E, r24
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <Time_AdjustCursor+0x22>
	else
		TimeCell=TimeCell+3;
    1b2e:	80 91 9e 01 	lds	r24, 0x019E
    1b32:	8d 5f       	subi	r24, 0xFD	; 253
    1b34:	80 93 9e 01 	sts	0x019E, r24
}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <Time_incerement>:

void Time_incerement(void)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
	if(TimeCell==1)
    1b46:	80 91 9e 01 	lds	r24, 0x019E
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	61 f4       	brne	.+24     	; 0x1b66 <Time_incerement+0x28>
	{
		HrVar++;
    1b4e:	80 91 a3 01 	lds	r24, 0x01A3
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	80 93 a3 01 	sts	0x01A3, r24
		if(HrVar>11)
    1b58:	80 91 a3 01 	lds	r24, 0x01A3
    1b5c:	8c 30       	cpi	r24, 0x0C	; 12
    1b5e:	68 f1       	brcs	.+90     	; 0x1bba <Time_incerement+0x7c>
			HrVar=0;
    1b60:	10 92 a3 01 	sts	0x01A3, r1
    1b64:	2a c0       	rjmp	.+84     	; 0x1bba <Time_incerement+0x7c>
	}
	else if(TimeCell==4)
    1b66:	80 91 9e 01 	lds	r24, 0x019E
    1b6a:	84 30       	cpi	r24, 0x04	; 4
    1b6c:	61 f4       	brne	.+24     	; 0x1b86 <Time_incerement+0x48>
	{
		MinVar++;
    1b6e:	80 91 a4 01 	lds	r24, 0x01A4
    1b72:	8f 5f       	subi	r24, 0xFF	; 255
    1b74:	80 93 a4 01 	sts	0x01A4, r24
		if(MinVar>59)
    1b78:	80 91 a4 01 	lds	r24, 0x01A4
    1b7c:	8c 33       	cpi	r24, 0x3C	; 60
    1b7e:	e8 f0       	brcs	.+58     	; 0x1bba <Time_incerement+0x7c>
			MinVar=0;
    1b80:	10 92 a4 01 	sts	0x01A4, r1
    1b84:	1a c0       	rjmp	.+52     	; 0x1bba <Time_incerement+0x7c>
	}
	else if(TimeCell==7)
    1b86:	80 91 9e 01 	lds	r24, 0x019E
    1b8a:	87 30       	cpi	r24, 0x07	; 7
    1b8c:	61 f4       	brne	.+24     	; 0x1ba6 <Time_incerement+0x68>
	{
		SecVar++;
    1b8e:	80 91 a5 01 	lds	r24, 0x01A5
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	80 93 a5 01 	sts	0x01A5, r24
		if(SecVar>59)
    1b98:	80 91 a5 01 	lds	r24, 0x01A5
    1b9c:	8c 33       	cpi	r24, 0x3C	; 60
    1b9e:	68 f0       	brcs	.+26     	; 0x1bba <Time_incerement+0x7c>
			HrVar=0;
    1ba0:	10 92 a3 01 	sts	0x01A3, r1
    1ba4:	0a c0       	rjmp	.+20     	; 0x1bba <Time_incerement+0x7c>
	}
	else if(TimeCell==10)
    1ba6:	80 91 9e 01 	lds	r24, 0x019E
    1baa:	8a 30       	cpi	r24, 0x0A	; 10
    1bac:	31 f4       	brne	.+12     	; 0x1bba <Time_incerement+0x7c>
	{
		CL=CL^0x01;
    1bae:	80 91 a6 01 	lds	r24, 0x01A6
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	89 27       	eor	r24, r25
    1bb6:	80 93 a6 01 	sts	0x01A6, r24
	}

}
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <AlarmDisplay>:


void AlarmDisplay(void)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
	if (flag==0)
    1bc8:	80 91 9c 01 	lds	r24, 0x019C
    1bcc:	88 23       	and	r24, r24
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <AlarmDisplay+0x16>
		CLCD_voidWriteCmd(1);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
	flag=100;
    1bd6:	84 e6       	ldi	r24, 0x64	; 100
    1bd8:	80 93 9c 01 	sts	0x019C, r24

	CLCD_voidGoToXYPos(0,0);	//Initial place
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidGoToXYPos>
	CLCD_voidWriteString("ALARM MODE: ");
    1be4:	86 e7       	ldi	r24, 0x76	; 118
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>
	CLCD_voidGoToXYPos(0,1);	//Initial place
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidGoToXYPos>

	if(AlHrVar<10)
    1bf4:	80 91 a7 01 	lds	r24, 0x01A7
    1bf8:	8a 30       	cpi	r24, 0x0A	; 10
    1bfa:	70 f4       	brcc	.+28     	; 0x1c18 <AlarmDisplay+0x58>
	{
		CLCD_voidWriteData('0');
    1bfc:	80 e3       	ldi	r24, 0x30	; 48
    1bfe:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(AlHrVar);
    1c02:	80 91 a7 01 	lds	r24, 0x01A7
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e0       	ldi	r26, 0x00	; 0
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1c16:	0a c0       	rjmp	.+20     	; 0x1c2c <AlarmDisplay+0x6c>
	}
	else
		lcdnumberprinting(AlHrVar);
    1c18:	80 91 a7 01 	lds	r24, 0x01A7
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
	CLCD_voidWriteString(":");
    1c2c:	8c e6       	ldi	r24, 0x6C	; 108
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

	if(AlMinVar<10)
    1c34:	80 91 a8 01 	lds	r24, 0x01A8
    1c38:	8a 30       	cpi	r24, 0x0A	; 10
    1c3a:	70 f4       	brcc	.+28     	; 0x1c58 <AlarmDisplay+0x98>
	{
		CLCD_voidWriteData('0');
    1c3c:	80 e3       	ldi	r24, 0x30	; 48
    1c3e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(AlMinVar);
    1c42:	80 91 a8 01 	lds	r24, 0x01A8
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a0 e0       	ldi	r26, 0x00	; 0
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1c56:	0a c0       	rjmp	.+20     	; 0x1c6c <AlarmDisplay+0xac>
	}
	else
		lcdnumberprinting(AlMinVar);
    1c58:	80 91 a8 01 	lds	r24, 0x01A8
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e0       	ldi	r26, 0x00	; 0
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
	CLCD_voidWriteString(" ");
    1c6c:	8e e6       	ldi	r24, 0x6E	; 110
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

	if(AlCL==0)
    1c74:	80 91 9d 01 	lds	r24, 0x019D
    1c78:	88 23       	and	r24, r24
    1c7a:	29 f4       	brne	.+10     	; 0x1c86 <AlarmDisplay+0xc6>
		CLCD_voidWriteString("Am");
    1c7c:	80 e7       	ldi	r24, 0x70	; 112
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <AlarmDisplay+0xce>
	else
		CLCD_voidWriteString("Pm");
    1c86:	83 e7       	ldi	r24, 0x73	; 115
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <Alarm_AdjustCursor>:


void Alarm_AdjustCursor(void)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	if(AlCell==7)
    1c9c:	80 91 9f 01 	lds	r24, 0x019F
    1ca0:	87 30       	cpi	r24, 0x07	; 7
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <Alarm_AdjustCursor+0x18>
		AlCell=1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	80 93 9f 01 	sts	0x019F, r24
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <Alarm_AdjustCursor+0x22>
	else
		AlCell=AlCell+3;
    1cac:	80 91 9f 01 	lds	r24, 0x019F
    1cb0:	8d 5f       	subi	r24, 0xFD	; 253
    1cb2:	80 93 9f 01 	sts	0x019F, r24
}
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <Alarm_incerement>:

void Alarm_incerement(void)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
	if(AlCell==1)
    1cc4:	80 91 9f 01 	lds	r24, 0x019F
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	61 f4       	brne	.+24     	; 0x1ce4 <Alarm_incerement+0x28>
	{
		AlHrVar++;
    1ccc:	80 91 a7 01 	lds	r24, 0x01A7
    1cd0:	8f 5f       	subi	r24, 0xFF	; 255
    1cd2:	80 93 a7 01 	sts	0x01A7, r24
		if(AlHrVar>11)
    1cd6:	80 91 a7 01 	lds	r24, 0x01A7
    1cda:	8c 30       	cpi	r24, 0x0C	; 12
    1cdc:	e8 f0       	brcs	.+58     	; 0x1d18 <Alarm_incerement+0x5c>
			AlHrVar=0;
    1cde:	10 92 a7 01 	sts	0x01A7, r1
    1ce2:	1a c0       	rjmp	.+52     	; 0x1d18 <Alarm_incerement+0x5c>
	}
	else if(AlCell==4)
    1ce4:	80 91 9f 01 	lds	r24, 0x019F
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	61 f4       	brne	.+24     	; 0x1d04 <Alarm_incerement+0x48>
	{
		AlMinVar++;
    1cec:	80 91 a8 01 	lds	r24, 0x01A8
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	80 93 a8 01 	sts	0x01A8, r24
		if(AlMinVar>59)
    1cf6:	80 91 a8 01 	lds	r24, 0x01A8
    1cfa:	8c 33       	cpi	r24, 0x3C	; 60
    1cfc:	68 f0       	brcs	.+26     	; 0x1d18 <Alarm_incerement+0x5c>
			AlMinVar=0;
    1cfe:	10 92 a8 01 	sts	0x01A8, r1
    1d02:	0a c0       	rjmp	.+20     	; 0x1d18 <Alarm_incerement+0x5c>
	}
	else if(AlCell==7)
    1d04:	80 91 9f 01 	lds	r24, 0x019F
    1d08:	87 30       	cpi	r24, 0x07	; 7
    1d0a:	31 f4       	brne	.+12     	; 0x1d18 <Alarm_incerement+0x5c>
	{
		AlCL=AlCL^0x01;
    1d0c:	80 91 9d 01 	lds	r24, 0x019D
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	89 27       	eor	r24, r25
    1d14:	80 93 9d 01 	sts	0x019D, r24
	}

}
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <SWDisplay>:

void SWDisplay(void)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	if (flag==0)
    1d26:	80 91 9c 01 	lds	r24, 0x019C
    1d2a:	88 23       	and	r24, r24
    1d2c:	19 f4       	brne	.+6      	; 0x1d34 <SWDisplay+0x16>
		CLCD_voidWriteCmd(1);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
	flag=100;
    1d34:	84 e6       	ldi	r24, 0x64	; 100
    1d36:	80 93 9c 01 	sts	0x019C, r24

	CLCD_voidGoToXYPos(0,0);	//Initial place
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidGoToXYPos>
	CLCD_voidWriteString("STOPWATCH MODE: ");
    1d42:	83 e8       	ldi	r24, 0x83	; 131
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>
	CLCD_voidGoToXYPos(0,1);	//Initial place
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidGoToXYPos>

	if(SWHrVar<10)
    1d52:	80 91 a9 01 	lds	r24, 0x01A9
    1d56:	8a 30       	cpi	r24, 0x0A	; 10
    1d58:	70 f4       	brcc	.+28     	; 0x1d76 <SWDisplay+0x58>
	{
		CLCD_voidWriteData('0');
    1d5a:	80 e3       	ldi	r24, 0x30	; 48
    1d5c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(SWHrVar);
    1d60:	80 91 a9 01 	lds	r24, 0x01A9
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1d74:	0a c0       	rjmp	.+20     	; 0x1d8a <SWDisplay+0x6c>
	}
	else
		lcdnumberprinting(SWHrVar);
    1d76:	80 91 a9 01 	lds	r24, 0x01A9
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
	CLCD_voidWriteString(":");
    1d8a:	8c e6       	ldi	r24, 0x6C	; 108
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

	if(SWMinVar<10)
    1d92:	80 91 aa 01 	lds	r24, 0x01AA
    1d96:	8a 30       	cpi	r24, 0x0A	; 10
    1d98:	70 f4       	brcc	.+28     	; 0x1db6 <SWDisplay+0x98>
	{
		CLCD_voidWriteData('0');
    1d9a:	80 e3       	ldi	r24, 0x30	; 48
    1d9c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(SWMinVar);
    1da0:	80 91 aa 01 	lds	r24, 0x01AA
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1db4:	0a c0       	rjmp	.+20     	; 0x1dca <SWDisplay+0xac>
	}
	else
		lcdnumberprinting(SWMinVar);
    1db6:	80 91 aa 01 	lds	r24, 0x01AA
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e0       	ldi	r26, 0x00	; 0
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
	CLCD_voidWriteString(":");
    1dca:	8c e6       	ldi	r24, 0x6C	; 108
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 27 06 	call	0xc4e	; 0xc4e <CLCD_voidWriteString>

	if(SWSecVar<10)
    1dd2:	80 91 ab 01 	lds	r24, 0x01AB
    1dd6:	8a 30       	cpi	r24, 0x0A	; 10
    1dd8:	70 f4       	brcc	.+28     	; 0x1df6 <SWDisplay+0xd8>
	{
		CLCD_voidWriteData('0');
    1dda:	80 e3       	ldi	r24, 0x30	; 48
    1ddc:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <CLCD_voidWriteData>
		lcdnumberprinting(SWSecVar);
    1de0:	80 91 ab 01 	lds	r24, 0x01AB
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
    1df4:	0a c0       	rjmp	.+20     	; 0x1e0a <SWDisplay+0xec>
	}
	else
		lcdnumberprinting(SWSecVar);
    1df6:	80 91 ab 01 	lds	r24, 0x01AB
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e0       	ldi	r26, 0x00	; 0
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 50 07 	call	0xea0	; 0xea0 <lcdnumberprinting>
}
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <SW_Start_Stop>:

void SW_Start_Stop(void)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
	if(SWstatus==1)
    1e18:	80 91 ac 01 	lds	r24, 0x01AC
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <SW_Start_Stop+0x16>
		SWstatus=0;
    1e20:	10 92 ac 01 	sts	0x01AC, r1
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <SW_Start_Stop+0x20>
	else
		SWstatus++;
    1e26:	80 91 ac 01 	lds	r24, 0x01AC
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
    1e2c:	80 93 ac 01 	sts	0x01AC, r24

	if(SWstatus==0)
    1e30:	80 91 ac 01 	lds	r24, 0x01AC
    1e34:	88 23       	and	r24, r24
    1e36:	19 f4       	brne	.+6      	; 0x1e3e <SW_Start_Stop+0x2e>
	{
		SWIncerementFlag=0;
    1e38:	10 92 af 01 	sts	0x01AF, r1
    1e3c:	07 c0       	rjmp	.+14     	; 0x1e4c <SW_Start_Stop+0x3c>
	}
	else if(SWstatus==1)
    1e3e:	80 91 ac 01 	lds	r24, 0x01AC
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	19 f4       	brne	.+6      	; 0x1e4c <SW_Start_Stop+0x3c>
	{
		SWIncerementFlag=1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	80 93 af 01 	sts	0x01AF, r24
	}
}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <SW_Reset>:

void SW_Reset(void)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidWriteCmd(1);
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	0e 94 00 06 	call	0xc00	; 0xc00 <CLCD_voidWriteCmd>
	SWIncerementFlag=0;
    1e60:	10 92 af 01 	sts	0x01AF, r1
	SWstatus=0;
    1e64:	10 92 ac 01 	sts	0x01AC, r1
	SWHrVar=0; SWMinVar=0; SWSecVar=0;
    1e68:	10 92 a9 01 	sts	0x01A9, r1
    1e6c:	10 92 aa 01 	sts	0x01AA, r1
    1e70:	10 92 ab 01 	sts	0x01AB, r1
}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <__udivmodsi4>:
    1e7a:	a1 e2       	ldi	r26, 0x21	; 33
    1e7c:	1a 2e       	mov	r1, r26
    1e7e:	aa 1b       	sub	r26, r26
    1e80:	bb 1b       	sub	r27, r27
    1e82:	fd 01       	movw	r30, r26
    1e84:	0d c0       	rjmp	.+26     	; 0x1ea0 <__udivmodsi4_ep>

00001e86 <__udivmodsi4_loop>:
    1e86:	aa 1f       	adc	r26, r26
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	ee 1f       	adc	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	a2 17       	cp	r26, r18
    1e90:	b3 07       	cpc	r27, r19
    1e92:	e4 07       	cpc	r30, r20
    1e94:	f5 07       	cpc	r31, r21
    1e96:	20 f0       	brcs	.+8      	; 0x1ea0 <__udivmodsi4_ep>
    1e98:	a2 1b       	sub	r26, r18
    1e9a:	b3 0b       	sbc	r27, r19
    1e9c:	e4 0b       	sbc	r30, r20
    1e9e:	f5 0b       	sbc	r31, r21

00001ea0 <__udivmodsi4_ep>:
    1ea0:	66 1f       	adc	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	1a 94       	dec	r1
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <__udivmodsi4_loop>
    1eac:	60 95       	com	r22
    1eae:	70 95       	com	r23
    1eb0:	80 95       	com	r24
    1eb2:	90 95       	com	r25
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	ac 01       	movw	r20, r24
    1eb8:	bd 01       	movw	r22, r26
    1eba:	cf 01       	movw	r24, r30
    1ebc:	08 95       	ret

00001ebe <__prologue_saves__>:
    1ebe:	2f 92       	push	r2
    1ec0:	3f 92       	push	r3
    1ec2:	4f 92       	push	r4
    1ec4:	5f 92       	push	r5
    1ec6:	6f 92       	push	r6
    1ec8:	7f 92       	push	r7
    1eca:	8f 92       	push	r8
    1ecc:	9f 92       	push	r9
    1ece:	af 92       	push	r10
    1ed0:	bf 92       	push	r11
    1ed2:	cf 92       	push	r12
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	ca 1b       	sub	r28, r26
    1ee8:	db 0b       	sbc	r29, r27
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	09 94       	ijmp

00001ef6 <__epilogue_restores__>:
    1ef6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ef8:	39 88       	ldd	r3, Y+17	; 0x11
    1efa:	48 88       	ldd	r4, Y+16	; 0x10
    1efc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1efe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f00:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f02:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f04:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f06:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f08:	b9 84       	ldd	r11, Y+9	; 0x09
    1f0a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f0c:	df 80       	ldd	r13, Y+7	; 0x07
    1f0e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f10:	fd 80       	ldd	r15, Y+5	; 0x05
    1f12:	0c 81       	ldd	r16, Y+4	; 0x04
    1f14:	1b 81       	ldd	r17, Y+3	; 0x03
    1f16:	aa 81       	ldd	r26, Y+2	; 0x02
    1f18:	b9 81       	ldd	r27, Y+1	; 0x01
    1f1a:	ce 0f       	add	r28, r30
    1f1c:	d1 1d       	adc	r29, r1
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	ed 01       	movw	r28, r26
    1f2a:	08 95       	ret

00001f2c <_exit>:
    1f2c:	f8 94       	cli

00001f2e <__stop_program>:
    1f2e:	ff cf       	rjmp	.-2      	; 0x1f2e <__stop_program>
